name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: apps/api/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: apps/api
      run: poetry install --no-interaction --no-root

    - name: Install project
      working-directory: apps/api
      run: poetry install --no-interaction

    - name: Run black
      working-directory: apps/api
      run: poetry run black --check .

    - name: Run isort
      working-directory: apps/api
      run: poetry run isort --check-only .

    - name: Run ruff
      working-directory: apps/api
      run: poetry run ruff check .

    - name: Run mypy
      working-directory: apps/api
      run: poetry run mypy .

    - name: Run tests
      working-directory: apps/api
      run: poetry run pytest

  lint-and-test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.6.10

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      working-directory: apps/web
      run: pnpm lint

    - name: Run Prettier check
      run: pnpm format:check

    - name: Type check
      working-directory: apps/web
      run: pnpm type-check

    - name: Build
      working-directory: apps/web
      run: pnpm build

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test-python, lint-and-test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Build API Docker image
      run: docker build -f apps/api/Dockerfile apps/api

    - name: Build Web Docker image
      run: docker build -f apps/web/Dockerfile apps/web
